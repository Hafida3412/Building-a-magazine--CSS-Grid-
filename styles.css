*, ::before, ::after {
    padding: 0;
    margin: 0;
    box-sizing: border-box;
  }

  html{
    font-size:62.5%;/*This will set the default font size for your web page to 10px (the browser default is 16px).
    This will make it easier for you to work with rem units later, as 2rem would be 20px.*/
  }

  body {
    font-family: 'Baskervville', serif;
    color: linen;
    background-color: rgb(20, 30, 40);
  }
  
  h1 {
    font-family: 'Anton', sans-serif;
  }
  
  h2, h3, h4, h5, h6 {
    font-family: 'Raleway', sans-serif;
  }
  
  a {
    text-decoration: none;
    color: linen;
  }

  /*Now you are ready to start putting together the grid layout. CSS Grid offers a two-dimensional
   grid-based layout, allowing you to center items horizontally and vertically while still retaining
   control to do things like overlap elements.*/

   main {
    display: grid;
    grid-template-columns: minmax(2rem, 1fr) minmax(min-content, 94rem) minmax(2rem, 1fr);  /*CSS Grid is similar to Flexbox in that it has a special property 
    for both the parent and child elements. In this case, your parent element is the main element.
    Set the content to have a three-column layout by adding a grid-template-columns property with a value
    of 1fr 94rem 1fr. This will create three columns where the middle column is 94rem wide, and the first 
    and last columns are both 1 fraction of the remaining space in the grid container.*/

    /*Use the minmax function to make your columns responsive on any device. The minmax function takes 
    two arguments, the first being the minimum value and the second being the maximum. These values could 
    be a length, percentage, fr, or even a keyword like max-content.*/
    
    row-gap: 3rem;  /*To add space between rows in the grid layout*/
  }
  
  img{
    width: 100%;
    object-fit: cover;  /*The object-fit property tells the browser how to position the element within 
    its container. In this case, cover will set the image to fill the container, cropping as needed to 
    avoid changing the aspect ratio.*/
  }
  
  hr{
    margin :1.5rem 0;
    border: 1px solid rgba(120, 120, 120, 0.6);
  }

  .heading{
    grid-column: 2 / 3; /*the grid-column property, which is shorthand for grid-column-start and grid-column-end. 
    The grid-column property tells the grid item which grid line to start and end at.
    --->This will tell the .heading element to start at grid line 2 and end at grid line 3.*/

    /*For additional control over the layout of your content, you can have a CSS Grid within a CSS Grid.*/
    display: grid;
    grid-template-columns: repeat(2, 1fr); /*The CSS repeat() function is used to repeat a value, rather than 
    writing it out manually, and is helpful for grid layouts. For example, setting the grid-template-columns
     property to repeat(20, 200px) would create 20 columns each 200px wide.*/
    row-gap: 1.5rem;
  }

  .text {
    grid-column: 2 / 3;
    font-size: 1.8rem;
    letter-spacing: 0.6px;
    column-width:25rem;  /*---we can create columns within an element without using Grid by using the 
    column-width property.*/
    text-align: justify;
  }

  .hero{
    grid-column: 1 / -1; /*There may be times where you are unsure of how many columns your grid will have,
    but you want an element to stop at the last column. To do this, you can use -1 for the end column.*/
    position: relative;
  }

  .hero-title {
    text-align: center;
    color: orangered;
    font-size: 8rem;
  }
  
  .hero-subtitle{
    font-size: 2.4rem;
    color:orangered;
    text-align: center;
  }

  .author{
    font-size: 2rem;
    font-family: Raleway, sans-serif;
  }

  .author-name a:hover{
    background-color: #306203;  /*This will create a hover effect only for the a element within 
    the .author-name*/
  }

  .publish-date {
    color:rgba(255, 255, 255, 0.5);
  }

  .social-icons{
    display: grid;
    font-size: 3rem;
    grid-template-columns: repeat(5, 1fr);  /*The default settings for CSS Grid will create additional 
    rows as needed, unlike Flexbox. The grid-template-columns property set to repeat(5, 1fr) arrange 
    the icons in a single row.*/

    grid-auto-flow:column;   /*---If you wanted to add more social icons, but keep them on the same row,
    you would need to update grid-template-columns to create additional columns. As an alternative, you
     can use the grid-auto-flow property.
    This property takes either row or column as the first value, with an optional second value of dense.
    grid-auto-flow uses an auto-placement algorithm to adjust the grid layout. Setting it to column will
    tell the algorithm to create new columns for content as needed. The dense value allows the algorithm 
    to backtrack and fill holes in the grid with smaller items, which can result in items appearing out
    of order.*/

    grid-auto-columns: 1fr;  /*---Now the auto-placement algorithm will kick in when you add a new icon 
    element. However, the algorithm defaults the new column width to be auto, which will not match your 
    current columns.
    You can override this with the grid-auto-columns property.*/

    align-items: center;
  }

  
  .first-paragraph::first-letter{  /*---The ::first-letter pseudo-selector allows you to target the 
    first letter in the text content of an element.*/
    font-size: 6rem;
    color: orangered;
    float: left;
    margin-right: 1rem;
  }

  .quote{
    color:#00beef;
    font-size: 2.4rem;
    text-align: center;
    font-family: Raleway, sans-serif;
  }

  .quote::before{
    content:'" ';  /* the quotes are in front*/
  }
  
  .quote::after{
   content:' "';   /*the quotes are behind*/
  }

  .text-with-images {
    display: grid;
    grid-template-columns: 1fr 2fr;
    column-gap: 3rem;
    margin-bottom: 3rem;
  }
  
  .lists {
    list-style-type: none;
    margin-top: 2rem;
  }
  
  .lists li {
    margin-bottom: 1.5rem;
  }
  
  .list-title, .list-subtitle {
    color: #00beef;
  }
  

  /*The images should be within a two column, three row layout.*/
  .image-wrapper {
    display: grid;
    grid-template-columns: 2fr 1fr;
    grid-template-rows: repeat(3, min-content); /*----This will give our grid rows that adjust
    in height based on the content, but columns that remain a fixed width based on the container.*/
    gap: 2rem;
    place-items: center; /*---The place-items property can be used to set the align-items and justify-items 
    values at the same time. The place-items property takes one or two values. If one value is provided, 
    it is used for both the align-items and justify-items properties. If two values are provided, the first
     value is used for the align-items property and the second value is used for the justify-items property.*/
}
  
  .image-1, .image-3{
    grid-column: 1 / -1; /*---This will allow the first and third images to span the full width of the grid.*/
  }

   @media only screen and (max-width:720px){ /*---This will collapse the three images into one column on smaller screens.*/
    .image-wrapper{
      grid-template-columns:1fr;
    }
      }


  @media only screen and (max-width: 600px) { /*--This will collapse your bottom text area into a single column on smaller screens.*/
     .text-with-images{
     grid-template-columns:1fr;
        }
    }
  
  
    @media only screen and (max-width: 550px) {
     .hero-title{
     font-size: 6rem;
    }
     .hero-subtitle, .author, .quote, .list-title{
     font-size: 1.8rem;
    }
    .social-icons{
     font-size: 2rem;
    }
    .text{
    font-size :1.6rem;
    }
    }

    
    
    @media only screen and (max-width: 420px){
    .hero-title{
    font-size: 4.5rem;
    }
    }